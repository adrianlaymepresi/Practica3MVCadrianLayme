@model PracticaMVC_AdrianLayme3.Models.PedidoModel

@{
    ViewData["Title"] = "Editar Pedido";
    string hoyMin = DateTime.Now.ToString("yyyy-MM-ddTHH:mm");
    string maxFecha = new DateTime(2100, 12, 31, 23, 59, 0).ToString("yyyy-MM-ddTHH:mm");
    var clienteNombre = Model?.Cliente?.Nombre ?? "";
    var clienteCi = Model?.Cliente?.CarnetIdentidad.ToString() ?? "";
}

<div class="container-fluid">
    <div class="d-flex justify-content-between align-items-center mb-3">
        <h2 class="m-0 text-light">EDITAR PEDIDO</h2>
        <div class="d-flex gap-2">
            <a class="btn btn-sm btn-outline-secondary" asp-action="Index">↩️ Volver</a>
        </div>
    </div>

    <div class="card p-3 card-tabla">
        <form asp-action="Edit" method="post" class="row g-3 w-100" novalidate>
            <input type="hidden" asp-for="Id" />

            <div class="col-12">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            </div>

            <div class="col-12 col-md-6">
                <label class="form-label m-0">Cliente</label>
                <div class="input-group">
                    <input id="cliente_display"
                           class="form-control"
                           type="text"
                           placeholder="Agrega cliente aquí"
                           value="@(string.IsNullOrWhiteSpace(clienteNombre) ? "" : $"{clienteNombre} (CI: {clienteCi})")"
                           disabled />
                    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalClientes">
                        Cambiar
                    </button>
                </div>
                <input type="hidden" asp-for="IdCliente" id="IdCliente" />
                <span asp-validation-for="IdCliente" class="text-danger"></span>
                <div class="small text-secondary mt-1" id="cliente_info">@(Model?.IdCliente > 0 ? $"ID asignado: {Model.IdCliente}" : "")</div>
            </div>

            <div class="col-12 col-md-6">
                <label asp-for="FechaPedido" class="form-label m-0">@Html.DisplayNameFor(m => m.FechaPedido)</label>
                <input asp-for="FechaPedido"
                       class="form-control"
                       type="datetime-local"
                       step="60"
                       min="@hoyMin"
                       max="@maxFecha" />
                <span asp-validation-for="FechaPedido" class="text-danger"></span>
            </div>

            <div class="col-12">
                <label asp-for="Direccion" class="form-label m-0">
                    @Html.DisplayNameFor(m => m.Direccion)
                    <span id="contador_direccion" class="badge rounded-pill bg-secondary ms-2">350 restantes</span>
                </label>
                <input asp-for="Direccion"
                       class="form-control"
                       minlength="7"
                       maxlength="350"
                       placeholder="Dirección de entrega" />
                <span asp-validation-for="Direccion" class="text-danger"></span>
            </div>

            <div class="col-12 col-md-6">
                <label asp-for="MontoTotal" class="form-label m-0">@Html.DisplayNameFor(m => m.MontoTotal)</label>
                <input asp-for="MontoTotal" class="form-control" readonly />
                <div class="small text-secondary">Se calcula automáticamente según los detalles.</div>
                <span asp-validation-for="MontoTotal" class="text-danger"></span>
            </div>

            <div class="col-12 d-flex justify-content-center gap-2 mt-2">
                <a class="btn btn-outline-secondary" asp-action="Index">Cancelar</a>
                <button type="submit" class="btn btn-success">💾 Guardar cambios</button>
            </div>
        </form>
    </div>
</div>

<!-- Modal: Selección de Clientes (mismo que Create) -->
<div class="modal fade" id="modalClientes" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered">
        <div class="modal-content" style="background:#0f1113; color:#f8f9fa; border:1px solid #2b2f33;">
            <div class="modal-header" style="background: linear-gradient(90deg, #2c3e50, #6c5ce7);">
                <h5 class="modal-title">Seleccionar cliente</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>

            <div class="modal-body">
                <div class="d-flex justify-content-between align-items-center mb-3">
                    <form id="form-modal-paginado" class="d-flex align-items-center gap-2">
                        <label class="text-light m-0 text-nowrap">Registros por página</label>
                        <input id="modal_cant"
                               class="form-control form-control-sm"
                               type="number"
                               min="1"
                               max="99"
                               inputmode="numeric"
                               value="5"
                               oninput="this.value = this.value.replace(/\D/g,'').slice(0,2)"
                               style="width:70px" />
                        <button type="button" class="btn btn-sm btn-primary text-nowrap" id="modal_aplicar">👁️ Aplicar</button>
                    </form>

                    <form id="form-modal-busqueda" class="d-flex align-items-center gap-2">
                        <select id="modal_modo" class="form-select form-select-sm" style="width:150px">
                            <option value="nombre" selected>Nombre</option>
                            <option value="ci">Carnet</option>
                        </select>
                        <input id="modal_q"
                               class="form-control form-control-sm"
                               type="search"
                               placeholder="🔍 Buscar…"
                               autocomplete="off"
                               style="width: 250px;"
                               maxlength="100" />
                    </form>
                </div>

                <div class="table-responsive">
                    <table class="table table-bordered table-hover text-center mb-0">
                        <thead>
                            <tr>
                                <th class="text-white">Nombre</th>
                                <th class="text-white">Carnet Identidad</th>
                                <th class="text-white">Acciones</th>
                            </tr>
                        </thead>
                        <tbody id="modal_tbody"></tbody>
                    </table>
                </div>

                <nav class="mt-3">
                    <ul class="pagination justify-content-center flex-wrap gap-1" id="modal_paginado"></ul>
                </nav>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-outline-secondary" data-bs-dismiss="modal">Cerrar</button>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        (() => {
            // Contador Dirección
            const direccion = document.getElementById('Direccion');
            const badgeDireccion = document.getElementById('contador_direccion');
            const bindLeft = (el, badge, max) => {
                if (!el || !badge) return;
                const up = () => { badge.textContent = (max - (el.value || '').length) + ' restantes'; };
                el.addEventListener('input', up); up();
            };
            bindLeft(direccion, badgeDireccion, 350);

            // Modal (idéntico a Create)
            const tbody = document.getElementById('modal_tbody');
            const ulPag = document.getElementById('modal_paginado');
            const inputQ = document.getElementById('modal_q');
            const inputCant = document.getElementById('modal_cant');
            const selectModo = document.getElementById('modal_modo');
            const btnAplicar = document.getElementById('modal_aplicar');

            let pagina = 1;

            async function cargar() {
                const q = (inputQ.value || '').trim();
                const cant = parseInt(inputCant.value || '5') || 5;
                const modo = selectModo.value || 'nombre';
                const resp = await fetch(`@Url.Action("BuscarClientes", "Pedido")?q=${encodeURIComponent(q)}&modo=${encodeURIComponent(modo)}&pagina=${pagina}&cantidadRegistrosPorPagina=${cant}`);
                const data = await resp.json();

                tbody.innerHTML = '';
                if (data.items && data.items.length) {
                    for (const c of data.items) {
                        const tr = document.createElement('tr');
                        tr.innerHTML = `
                            <td class="text-white">${c.nombre ?? ''}</td>
                            <td class="text-white">${c.ci ?? ''}</td>
                            <td>
                                <button type="button" class="btn btn-sm btn-success" data-id="${c.id}" data-nombre="${c.nombre ?? ''}" data-ci="${c.ci ?? ''}" data-direccion="${(c.direccion ?? '').replace(/"/g,'&quot;')}">Agregar</button>
                            </td>`;
                        tbody.appendChild(tr);
                    }
                } else {
                    const tr = document.createElement('tr');
                    tr.innerHTML = `<td colspan="3" class="text-center text-white py-3">Sin resultados.</td>`;
                    tbody.appendChild(tr);
                }

                ulPag.innerHTML = '';
                const addLi = (enabled, text, targetPage) => {
                    const li = document.createElement('li');
                    li.className = `page-item ${enabled ? '' : 'disabled'}`;
                    const a = document.createElement('a');
                    a.className = 'page-link';
                    a.textContent = text;
                    if (enabled) a.addEventListener('click', () => { pagina = targetPage; cargar(); });
                    li.appendChild(a);
                    ulPag.appendChild(li);
                };

                addLi(data.hasPrev, '« Anterior', data.pagina - 1);

                const li1 = document.createElement('li');
                li1.className = `page-item ${data.pagina === 1 ? 'active' : ''}`;
                const a1 = document.createElement('a');
                a1.className = 'page-link'; a1.textContent = '1';
                a1.addEventListener('click', () => { pagina = 1; cargar(); });
                li1.appendChild(a1); ulPag.appendChild(li1);

                if (data.pageWindowStart > 1) {
                    const li = document.createElement('li');
                    li.className = 'page-item disabled';
                    li.innerHTML = '<span class="page-link">…</span>';
                    ulPag.appendChild(li);
                }

                for (let i = data.pageWindowStart; i <= data.pageWindowEnd; i++) {
                    if (i === 1) continue;
                    const li = document.createElement('li');
                    li.className = `page-item ${i === data.pagina ? 'active' : ''}`;
                    const a = document.createElement('a');
                    a.className = 'page-link'; a.textContent = i;
                    a.addEventListener('click', () => { pagina = i; cargar(); });
                    li.appendChild(a); ulPag.appendChild(li);
                }

                if (data.pageWindowEnd < data.totalPaginas) {
                    const li = document.createElement('li');
                    li.className = 'page-item disabled';
                    li.innerHTML = '<span class="page-link">…</span>';
                    ulPag.appendChild(li);
                }

                addLi(data.hasNext, 'Siguiente »', data.pagina + 1);
            }

            let t;
            inputQ.addEventListener('input', () => { clearTimeout(t); t = setTimeout(() => { pagina = 1; cargar(); }, 600); });
            selectModo.addEventListener('change', () => { pagina = 1; cargar(); });
            btnAplicar.addEventListener('click', () => { pagina = 1; cargar(); });

            document.getElementById('modalClientes').addEventListener('shown.bs.modal', () => {
                cargar();
                inputQ.focus();
            });

            const idClienteHidden = document.getElementById('IdCliente');
            const clienteDisplay = document.getElementById('cliente_display');
            const clienteInfo = document.getElementById('cliente_info');

            tbody.addEventListener('click', (ev) => {
                const btn = ev.target.closest('button.btn-success');
                if (!btn) return;

                const id = btn.getAttribute('data-id');
                const nombre = btn.getAttribute('data-nombre') || '';
                const ci = btn.getAttribute('data-ci') || '';
                const dir = btn.getAttribute('data-direccion') || '';

                idClienteHidden.value = id;
                clienteDisplay.value = `${nombre} (CI: ${ci})`;
                clienteInfo.textContent = `ID asignado: ${id}`;
                const dirInput = document.getElementById('Direccion');
                if (dirInput) dirInput.value = dir;

                const modal = bootstrap.Modal.getInstance(document.getElementById('modalClientes'));
                modal.hide();
            });
        })();
    </script>
}
